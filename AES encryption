package AES;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.InvalidKeyException;
import java.security.Key;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;  
import javax.crypto.CipherInputStream;
import java.util.concurrent.TimeUnit;
	public class AES {
	
		static long startTime = System.nanoTime();
	public static void encryption()
	throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException
	{
	
	   
	try
	{
	Cipher cipher=Cipher.getInstance("AES");
	KeyGenerator keyg=KeyGenerator.getInstance("AES");
	Key key=keyg.generateKey();
	 
	cipher.init(Cipher.ENCRYPT_MODE, key); 
	
	CipherInputStream cipt=new CipherInputStream(new FileInputStream(new File("E:\\Validation\\person1_virus_6.jpeg")), cipher);
	 
	FileOutputStream fileip=new FileOutputStream(new File("E:\\Check_Validation\\encrypt.jpg"));
	
	int i;
	while((i=cipt.read())!=-1)
	{
	fileip.write(i);
	
	}
	
	
	
	cipher.init(Cipher.DECRYPT_MODE, key);
	  
	CipherInputStream ciptt=new CipherInputStream(new FileInputStream(new File("E:\\Check_Validation\\encrypt.jpg")), cipher);
	
	FileOutputStream fileop=new FileOutputStream(new File("E:\\Check_Validation\\decrypt.jpg"));
	
	int j;
	while((j=ciptt.read())!=-1)
	{
	fileop.write(j);
	}
	
	
	
	
	}
	catch(Exception e)
	{
	e.printStackTrace();
	}
	
	
	}
	
	
	
	
	
	public static void main(String[] args)
	{
	try
	{
	AES.encryption(); 
	
	}catch(Exception e)
	{
	e.printStackTrace();
	}
	
	long endTime = System.nanoTime();
	long timeElapsed = endTime - startTime;
	
	System.out.println("Execution time in nanoseconds: " + timeElapsed);
	System.out.println("Execution time in milliseconds: " + timeElapsed / 1000000);
	}
	}
